package main

import "fmt"
//
/*
	Область видимости анонимной функции. Замыкание

В отличие от именованной функции, функция анонимная имеет доступ к окружению,
в котором она была объявлена (в некоторых случаях объявление и вызов анонимной функции происходит одновременно):
*/
func externalFunction() func() {
	text := "TEXT"

	return func() {
		fmt.Println(text)
	}
}
func ExampleEnvironment() {
	fn := externalFunction()
	fn()

	// Output:
	// TEXT
}
/*Когда анонимная функция использует переменные, объявленные за ее рамками, ее называют замыканием.
В приведенном примере мы объявили именованную функцию externalFunction, в которой объявляется переменная text.
В качестве значения функция externalFunction возвращает замыкание - анонимную функцию,
которая имеет доступ к переменной text, объявленной за ее пределами. Затем мы присвоили переменной fn результат выполнения функции externalFunction.
Теперь fn - функция, мы вызываем ее, тем самым печатаем значение переменной text.

Усложним пример:
 */
*/

func ExampleClosure() {
	fn := func() func(int) int {
		count := 0
		return func(i int) int {
			count++
			return count * i
		}
	}()

	for i := 1; i <= 5; i++ {
		fmt.Println(fn(i))
	}

	// Output:
	// 1
	// 4
	// 9
	// 16
	// 25
}
// Здесь мы не просто печатаем значение переменной, но и изменяем его.


// https://kovardin.ru/articles/go/zamykaniya/